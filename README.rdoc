= Mailer Extension for Radiant

The Mailer extension enables form mail on a page.

== (Forked)

This version adds support for a 'trapped' parameter to text fields and textareas. If it's present, a bot trap is put in front of the field. It works like this:

* The field name is replaced with a random string.
* An input is placed on the form with name and id based on the random string
* Another input is added to the form with the real field name, but hidden from humans
* A hidden field (since we can't get at the session) records the mapping from random field name to real field name
* If anything is entered into the dummy field, we invalidate the form (and put an error on 'fieldname_trap')
* Before the rest of the validations, the real field names are restored

This is sometimes called an inverse captcha. It works surprisingly well at screening out form bots. Put this in your form:

  <r:mailer:text name="email" required="true" trapped="true" />
  
And you'll get something like this:

  <input type="text" value="" id="pa83cyAoiGruh" name="mailer[pa83cyAoiGruh]" />
  <input type="text" style="display: none" value="" id="email" name="mailer[email]" />
  <input type="hidden" name="mailer[untrap][email]" value="pa83cyAoiGruh" />
  <input type="hidden" name="mailer[required][email]" value="true" />
  
Note that the 'required' flag carries the real field name: that's because we check the trap and restore the correct field labels before any other validation happens.

Traps can be set on text inputs and textareas. It ought to work for checkboxes and radio buttons too but I haven't tried it yet.

There are tests for the new behaviour in mailer_tags_spec and mail_spec.

=== (minor issues)

* You can't label the trapped field properly because it has a random name. If that bothers you, you can also pass through a 'trap_name' parameter, but beware: if you label your random field 'email' it is easier to spot.
* The concealment possible here is quite shallow. The trap field should really be hidden in a less detectable way - using javascript after the page has loaded, say - and the untrap mapping should be carried through another channel (eg in the session). We can't do that because radius tags are defined in a model and have no access to the world. Suggestions would be very welcome.

=== (other fixes)

* changed spec/dataset to spec/datasets since that's what spec_helper is looking for
* changed datasets/mailer to datasets/mailer_pages because rspec was finding Mailer before it found MailerDataset

== Usage

You can define email templates using pages parts (email, and/or email_html).
You configure the recipients and other Mailer settings in a "mailer" part:

  subject: From the website of Whatever
  from: noreply@example.com
  redirect_to: /contact/thank-you
  recipients:
    - one@one.com
    - two@two.com

The following tags are available to help you build the form:

  <r:mailer:form name=""> ... </r:mailer:form> 
  <r:mailer:text name="" /> 
  <r:mailer:checkbox name="" />
  <r:mailer:radio name="" />
  <r:mailer:radiogroup name=""> ... </r:mailer:radiogroup>
  <r:mailer:select name=""> ... </r:mailer:select>
  <r:mailer:date_select name=""/>
  <r:mailer:textarea name=""> ... </r:mailer:textarea>
  <r:mailer:option name="" />

When processing the form (in email and email_html), the following tags are 
available:

  <r:mailer:get name="" />
  <r:mailer:get_each name=""> ... </r:mailer:get_each>
    <r:mailer:index />

Simple example of a form:

  <r:mailer:form>
   <r:mailer:hidden name="subject" value="Email from my Radiant site!" /> <br/>
    Name:<br/>
   <r:mailer:text name="name" /> <br/>
    Message:<br/>
   <r:mailer:textarea name="message" /> <br/>
   <input type="submit" value="Send" />
  </r:mailer:form>


== User-provided Configuration

Sometimes, rather than explicitly configuring the recipients and such in the mailer part, you'd rather have them passed in by the person submitting the form. Mailer supports this by allowing you to specify a form field to pull the value from:

  from_field: my_form_field_that_contains_the_from_email_address
  
Then you just have to add that field to your mailer form and you're all set.

This is supported for the from (from_field), recipients (recipients_field) and reply_to (reply_to_field) properties.


== Enabling action_mailer

In environment.rb you'll probably need to change:

  config.frameworks -= [ :action_mailer ]

to:

  config.frameworks -= []


== Caveats

Relative urls will almost certainly not work if the mailer fails validation. Solution? Only use absolute urls.


== History

Created by: M@ McCray - mattmccray.com
  Version: 0.2.1
  Contact: mmccray@elucidata.net

Ported to 'mental' by: Sean Cribbs - seancribbs.com
  Version: 0.1
  Contact: seancribbs@gmail.com
  
Seriously restructured by: Nathaniel Talbott - terralien.com
  Version: 0.2
  Contact: nathaniel@terralien.com
  Work sponsored by: Ignite Social Media, http://ignitesocialmedia.com/


== Todo

* Support for file attachments to emails
* Tests
